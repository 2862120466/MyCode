要获悉字母的顺序值，可使用函数ord()。这个函数的作用与函数chr()相反

 打印语句：你可使用print语句来打印多个用逗号分隔的值。如果print语
   句以逗号结尾， 后续print语句将在当前行接着打印。
 导入语句：有时候，你不喜欢要导入的函数的名称——可能是因为你已将这个
   名称用作 他用。在这种情况下，可使用import ... as ...语句在本地
   重命名函数。
 赋值语句：通过使用奇妙的序列解包和链式赋值，可同时给多个变量赋值；
   而通过使用 增强赋值，可就地修改变量。  代码块：代码块用于通过缩
   进将语句编组。代码块可用于条件语句和循环中，还可用于 函数和类定
   义中（这将在本书后面介绍）。
 条件语句：条件语句根据条件（布尔表达式）决定是否执行后续代码块。
   通过使用if/elif/ else，可将多个条件语句组合起来。条件语句的一个
   变种是条件表达式，如a if b else c。
 断言：断言断定某件事（一个布尔表达式）为真，可包含说明为何必须如此
   的字符串。 如果指定的表达式为假，断言将导致程序停止执行（或引发第
   8章将介绍的异常）。好 尽早将错误揪出来，免得它潜藏在程序中，直到
   带来麻烦。  循环：你可针对序列中的每个元素（如特定范围内的每个数）
   执行代码块，也可在条件 为真时反复执行代码块。要跳过代码块中余下的代码，
   直接进入下一次迭代，可使用 continue语句；要跳出循环，可使用break语句。
   另外，你还可在循环末尾添加一个else 子句，它将在没有执行循环中的任
   何break语句时执行。
 推导：推导并不是语句，而是表达式。它们看起来很像循环，因此我将它们放在
   循环中 讨论。通过列表推导，可从既有列表创建出新列表，这是通过对列表元
   素调用函数、剔 除不想要的函数等实现的。推导功能强大，但在很多情况下，
   使用普通循环和条件语句 也可完成任务，且代码的可读性可能更高。使用类似
   于列表推导的表达式可创建出字典。
 pass、del、exec和eval：pass语句什么都不做，但适合用作占位符。
   del语句用于删除变量或数据结构的成员，但不能用于删除值。函数exec
   用于将字符串作为Python程序执行。 函数eval计算用字符串表示的表达
   式并返回结果。


5.8.1 本章介绍的新函数
函  数                                 描  述
chr(n)                             返回一个字符串，其中只包含一个字符，这个字符对应于传入的顺序值n（0 ≤ n < 256）
eval(source[,globals[,locals]])    计算并返回字符串表示的表达式的结果
exec(source[, globals[, locals]])  将字符串作为语句执行
enumerate(seq)                     生成可迭代的索引值对 ord(c) 接受一个只包含一个字符的字符串，并返回这个字符的顺序值（一个整数）
range([start,] stop[, step])       创建一个由整数组成的列表 reversed(seq) 按相反的顺序返回seq中的值，以便用于迭代
sorted(seq[,cmp][,key][,reverse])  返回一个列表，其中包含seq中的所有值且这些值是经过排序的
xrange([start,] stop[, step])      创建一个用于迭代的xrange对象
zip(seq1, seq2,...)                创建一个适合用于并行迭代的新序列

