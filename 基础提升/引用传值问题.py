'''
注意：在python中，值相等的不可变对象内存地址是共享的，创建可变对象永远是分配新地址，且分别声明的值相等的可变对象内存地址不同
python不允许程序员选择采用传值还是传引用。Python参数传递采用的肯定是“传对象引用”的方式。这种方式相当于传值和传引用的一种综合。
如果函数收到的是一个可变对象（比如字典或者列表）的引用，就能修改对象的原始值－－相当于通过“传引用”来传递对象。
如果函数收到的是一个不可变对象（比如数字、字符或者元组）的引用，就不能直接修改原始对象－－相当于通过“传值'来传递对象。
'''

def num(n):
    '''
    n的值从[1, 2]变成了[1, 2, 1, 2]，实际上[1, 2]和[1, 2, 1, 2]所占的内存空间都还是存在的，
    赋值运算后，n指向[1, 2, 1, 2]所在的内存。而x仍然指向[1, 2]所在的内存，所以后面打印x，其值还是[1, 2]
    :param n: x的引用
    :return: n
    '''
    n = n + n  # 相当于创建新的list对象
    return n
x = [1, 2]
n = num(x)
print(x)  # [1, 2]
print(n)  # [1, 2, 1, 2]


# def num2(n):
#     n = n.append(3)  # 直接对list做出修改，不会改变内存地址
#     return n
# x = [1, 2]
# n = num2(x)
# print(x)  # [1, 2, 3]
# print(n)  # None