#   序列：序列是一种数据结构，其中的元素带编号（编号从0开始）。列表、字符串和元组 都属于序列，其中列表是可变的（你可修改其内容），而元组和字符串是不可变的（一旦 创建，内容就是固定的）。要访问序列的一部分，可使用切片操作：提供两个指定切片起 始和结束位置的索引。要修改列表，可给其元素赋值，也可使用赋值语句给切片赋值。
#   成员资格：要确定特定的值是否包含在序列（或其他容器）中，可使用运算符in。将运 算符in用于字符串时情况比较特殊——这样可查找子串。
#   方法：一些内置类型（如列表和字符串，但不包括元组）提供了很多有用的方法。方法 有点像函数，只是与特定的值相关联。方法是面向对象编程的一个重要方面，这将在第7 章介绍。
#本章介绍的新函数
函  数                                           描  述
len(seq)                                      返回序列的长度
list(seq)                                     将序列转换为列表
max(args)                                     返回序列或一组参数中的大值
min(args)                                     返回序列和一组参数中的小值
reversed(seq)                                 让你能够反向迭代序列
sorted(seq)                                   返回一个有序列表，其中包含指定序列中的所有元素
tuple(seq)                                    将序列转换为元组


列表方法
append()  方法append用于将一个对象附加到列表末尾。append也就地修改列表。这意味着它不会返回修 改后的新列表，而是直接修改旧列表。这通常正是你想要的，但有时会带来麻烦
clear()   方法clear就地清空列表的内容。
copy()    方法 copy 复制列表。前面说过，常规复制只是将另一个名称关联到列表。
count()   方法count计算指定的元素在列表中出现了多少次。
extend()  方法extend让你能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提 供给方法extend。换而言之，你可使用一个列表来扩展另一个列表。
index()   方法index在列表中查找指定值第一次出现的索引
insert()  方法insert用于将一个对象插入列表。
pop()     方法pop从列表中删除一个元素（末尾为后一个元素），并返回这一元素。
remove()  方法remove用于删除第一个为指定值的元素。
reverse() 方法reverse按相反的顺序排列列表中的元素
sort()    方法sort用于对列表就地排序①。就地排序意味着对原来的列表进行修改，使其元素按顺序 排列，而不是返回排序后的列表的副本。
          方法sort接受两个可选参数：key和reverse
